//
// Created by HuaJuan on 2022/12/3.
//

#include "gtest/gtest.h"
#include <BST.h>
#include <vector>

using namespace std;

class BSTTest : public ::testing::Test {
};

TEST_F(BSTTest, testInsertAndExist) {
    BST bst;
    vector<int> v = {630, 294, 804, 516, 704, 498, 785, 903, 140, 19, 456, 570, 356,
                     758, 895, 946, 544, 16, 70, 210, 752, 79, 42, 374, 103, 241,
                     30, 910, 272, 434, 203, 917, 147, 540, 599, 537, 903, 589, 596,
                     597, 803, 863, 940, 898, 92, 182, 106, 638, 486, 291, 909, 196,
                     99, 144, 901, 733, 579, 458, 372, 200, 147, 446, 534, 371, 791,
                     8, 81, 926, 86, 653, 747, 346, 92, 366, 308, 285, 843, 587,
                     56, 898, 198, 956, 863, 466, 92, 929, 264, 924, 908, 351, 131,
                     515, 336, 79, 886, 800, 782, 874, 639, 675};
    for (int n: v) {
        bst.insert(n);
        ASSERT_TRUE(bst.exist(n)) << n << " should exists after insert";
    }
}

TEST_F(BSTTest, testRemoveAndExist) {
    BST bst;
    // no duplicate elements
    vector<int> v = {3557, 3597, 8269, 5587, 4673, 947, 4140, 308, 3976, 5346, 5605,
                     2331, 8955, 9022, 9573, 7405, 5884, 7608, 1159, 2701, 9423, 8645,
                     7185, 4528, 3594, 822, 7833, 4322, 3255, 9755, 1427, 3706, 743,
                     6182, 1969, 1909, 3765, 1464, 2051, 6176, 6535, 493, 9026, 117,
                     1446, 9898, 4042, 6689, 3785, 8062, 4598, 5474, 8818, 3349, 9488,
                     132, 9112, 216, 8413, 289, 9835, 2552, 7991, 3289, 2763, 7556,
                     5776, 1333, 8020, 6827, 3398, 5338, 1911, 490, 2894, 787, 135,
                     6517, 8678, 6547, 5672, 8223, 7013, 1140, 1954, 3079, 1285, 2437,
                     2999, 4970, 139, 7719, 2440, 5238, 4420, 1887, 7288, 2385, 4994,
                     2781};
    for (int n: v) {
        bst.insert(n);
    }
    for (int i = v.size() - 1; i >= 0; i--) {
        int n = v[i];
        ASSERT_TRUE(bst.exist(n)) << n << " should exists before remove";
        bst.remove(n);
        ASSERT_FALSE(bst.exist(n)) << n << " shouldn't exists after remove";
    }
}

TEST_F(BSTTest, testSize) {
    BST bst;
    vector<int> elements = {4, 7, 4, 9, 8, 9, 3, 9, 9, 1};
    vector<int> expectedSizes = {1, 2, 2, 3, 4, 4, 5, 5, 5, 6};

    for (size_t i = 0; i < elements.size(); i++) {
        int n = elements[i];
        int sizeExp = expectedSizes[i];
        bst.insert(n);
        int sizeAct = bst.size();
        ASSERT_EQ(sizeExp, sizeAct) << "After inserting " << i << "th element " << n << " , the size should be "
                                    << sizeExp;
    }

}

TEST_F(BSTTest, testFloor) {
    BST bst;
    vector<int> elements = {168, 34, 48, 162, 14, 43, 99, 110, 172, 150, 82, 105, 122,
                            195, 62, 189, 75, 48, 3, 57, 18, 108, 138, 76, 181, 38,
                            174, 198, 92, 66, 121, 6, 13, 35, 132, 12, 1, 95, 9,
                            14, 68, 151, 184, 85, 187, 97, 90, 115, 181, 73, 93, 132,
                            52, 101, 46, 100, 128, 173, 9, 37, 38, 122, 24, 38, 115,
                            82, 186, 198, 40, 146, 35, 79, 79, 119, 91, 50, 117, 183,
                            11, 20, 15, 187, 59, 187, 141, 18, 28, 187, 142, 65, 42,
                            110, 3, 87, 175, 162, 3, 13, 130, 20};
    vector<int> floorArguments = {82, 79, 64, 199, 173, 77, 205, 165, 113, 121, 113, -7, 32, 81, 159, 194, 78, 94, 46,
                                  57, 181, 145, 52, 183, 31, 68, 65, 147, 48, 43, 205, 60, 46, 122, 210, 93, 127, 172,
                                  40, 183, 181, 55, 188, 115, 83, 92, 100, 49, -3, 184, 59, 87, 111, 35, 169, 152, 146,
                                  91, 183, 112, 56, 90, 21, -3, 184, 8, 63, 121, 95, 115, 118, 110, 6, 200, 27, 24, 114,
                                  2, 110, 147, 47, 67, 169, 142, 179, 62, 132, 26, 98, 52, 68, 189, 154, 20, 57, 138,
                                  81, 179, 178, 118};
    vector<int> floorResults = {-2147483648, 34, 48, 168, 168, 48, 168, 162, 110, 110, 110, -2147483648, 14, 48, 150,
                                189, 75, 82, 43, 57, 172, 122, 48, 172, 18, 62, 62, 138, 48, 43, 198, 57, 43, 122, 198,
                                92, 122, 172, 38, 181, 181, 48, 184, 110, 82, 92, 99, 48, -2147483648, 184, 57, 85, 110,
                                35, 168, 151, 138, 90, 181, 110, 52, 90, 18, -2147483648, 184, 6, 62, 121, 95, 115, 115,
                                110, 6, 198, 24, 24, 110, 1, 110, 146, 46, 66, 168, 138, 174, 62, 132, 24, 97, 52, 68,
                                189, 151, 20, 57, 138, 79, 175, 175, 117};
    for (size_t i = 0; i < elements.size(); i++) {
        int n = elements[i];
        int floorArg = floorArguments[i];
        int floorResExp = floorResults[i];
        bst.insert(n);
        int floorResAct = bst.floor(floorArg);
        ASSERT_EQ(floorResExp, floorResAct) << "After inserting " << i << "th element " << n
                                            << ", calling bst.floor(" << floorArg << ") should return " << floorResExp;
    }

}
